// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddServiceClient is the client API for AddService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddServiceClient interface {
	Createuser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Loginuser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Deleteuser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Getuser(ctx context.Context, in *User, opts ...grpc.CallOption) (*GetUserDetails, error)
	Updatecontactdetails(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Getallpatients(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserSlice, error)
	Getalldonors(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserSlice, error)
	Sendrequest(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Acceptrequest(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Cancelconnection(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Cancelrequest(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type addServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddServiceClient(cc grpc.ClientConnInterface) AddServiceClient {
	return &addServiceClient{cc}
}

func (c *addServiceClient) Createuser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.AddService/createuser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Loginuser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.AddService/loginuser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Deleteuser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.AddService/deleteuser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Getuser(ctx context.Context, in *User, opts ...grpc.CallOption) (*GetUserDetails, error) {
	out := new(GetUserDetails)
	err := c.cc.Invoke(ctx, "/proto.AddService/getuser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Updatecontactdetails(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.AddService/updatecontactdetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Getallpatients(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserSlice, error) {
	out := new(UserSlice)
	err := c.cc.Invoke(ctx, "/proto.AddService/getallpatients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Getalldonors(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserSlice, error) {
	out := new(UserSlice)
	err := c.cc.Invoke(ctx, "/proto.AddService/getalldonors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Sendrequest(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.AddService/sendrequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Acceptrequest(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.AddService/acceptrequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Cancelconnection(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.AddService/cancelconnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Cancelrequest(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.AddService/cancelrequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddServiceServer is the server API for AddService service.
// All implementations must embed UnimplementedAddServiceServer
// for forward compatibility
type AddServiceServer interface {
	Createuser(context.Context, *User) (*User, error)
	Loginuser(context.Context, *User) (*User, error)
	Deleteuser(context.Context, *User) (*User, error)
	Getuser(context.Context, *User) (*GetUserDetails, error)
	Updatecontactdetails(context.Context, *User) (*User, error)
	Getallpatients(context.Context, *User) (*UserSlice, error)
	Getalldonors(context.Context, *User) (*UserSlice, error)
	Sendrequest(context.Context, *User) (*User, error)
	Acceptrequest(context.Context, *User) (*User, error)
	Cancelconnection(context.Context, *User) (*User, error)
	Cancelrequest(context.Context, *User) (*User, error)
	mustEmbedUnimplementedAddServiceServer()
}

// UnimplementedAddServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddServiceServer struct {
}

func (UnimplementedAddServiceServer) Createuser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Createuser not implemented")
}
func (UnimplementedAddServiceServer) Loginuser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loginuser not implemented")
}
func (UnimplementedAddServiceServer) Deleteuser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deleteuser not implemented")
}
func (UnimplementedAddServiceServer) Getuser(context.Context, *User) (*GetUserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getuser not implemented")
}
func (UnimplementedAddServiceServer) Updatecontactdetails(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updatecontactdetails not implemented")
}
func (UnimplementedAddServiceServer) Getallpatients(context.Context, *User) (*UserSlice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getallpatients not implemented")
}
func (UnimplementedAddServiceServer) Getalldonors(context.Context, *User) (*UserSlice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getalldonors not implemented")
}
func (UnimplementedAddServiceServer) Sendrequest(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sendrequest not implemented")
}
func (UnimplementedAddServiceServer) Acceptrequest(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acceptrequest not implemented")
}
func (UnimplementedAddServiceServer) Cancelconnection(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancelconnection not implemented")
}
func (UnimplementedAddServiceServer) Cancelrequest(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancelrequest not implemented")
}
func (UnimplementedAddServiceServer) mustEmbedUnimplementedAddServiceServer() {}

// UnsafeAddServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddServiceServer will
// result in compilation errors.
type UnsafeAddServiceServer interface {
	mustEmbedUnimplementedAddServiceServer()
}

func RegisterAddServiceServer(s grpc.ServiceRegistrar, srv AddServiceServer) {
	s.RegisterService(&AddService_ServiceDesc, srv)
}

func _AddService_Createuser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Createuser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/createuser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Createuser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Loginuser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Loginuser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/loginuser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Loginuser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Deleteuser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Deleteuser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/deleteuser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Deleteuser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Getuser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Getuser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/getuser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Getuser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Updatecontactdetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Updatecontactdetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/updatecontactdetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Updatecontactdetails(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Getallpatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Getallpatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/getallpatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Getallpatients(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Getalldonors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Getalldonors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/getalldonors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Getalldonors(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Sendrequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Sendrequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/sendrequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Sendrequest(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Acceptrequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Acceptrequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/acceptrequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Acceptrequest(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Cancelconnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Cancelconnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/cancelconnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Cancelconnection(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Cancelrequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Cancelrequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/cancelrequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Cancelrequest(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// AddService_ServiceDesc is the grpc.ServiceDesc for AddService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AddService",
	HandlerType: (*AddServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createuser",
			Handler:    _AddService_Createuser_Handler,
		},
		{
			MethodName: "loginuser",
			Handler:    _AddService_Loginuser_Handler,
		},
		{
			MethodName: "deleteuser",
			Handler:    _AddService_Deleteuser_Handler,
		},
		{
			MethodName: "getuser",
			Handler:    _AddService_Getuser_Handler,
		},
		{
			MethodName: "updatecontactdetails",
			Handler:    _AddService_Updatecontactdetails_Handler,
		},
		{
			MethodName: "getallpatients",
			Handler:    _AddService_Getallpatients_Handler,
		},
		{
			MethodName: "getalldonors",
			Handler:    _AddService_Getalldonors_Handler,
		},
		{
			MethodName: "sendrequest",
			Handler:    _AddService_Sendrequest_Handler,
		},
		{
			MethodName: "acceptrequest",
			Handler:    _AddService_Acceptrequest_Handler,
		},
		{
			MethodName: "cancelconnection",
			Handler:    _AddService_Cancelconnection_Handler,
		},
		{
			MethodName: "cancelrequest",
			Handler:    _AddService_Cancelrequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
